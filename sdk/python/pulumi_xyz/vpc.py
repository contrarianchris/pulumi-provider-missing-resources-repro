# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_aws

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 availability_zone_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cidr_block: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 tags: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        The set of arguments for constructing a Vpc resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zone_names: The list of target availability zone names.
        :param pulumi.Input[str] cidr_block: The IP CIDR block for the dedicated EKS VPC network.
        :param pulumi.Input[str] cluster_name: The name for the deployed EKS cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to apply to all child resources.
        """
        pulumi.set(__self__, "availability_zone_names", availability_zone_names)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZoneNames")
    def availability_zone_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of target availability zone names.
        """
        return pulumi.get(self, "availability_zone_names")

    @availability_zone_names.setter
    def availability_zone_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "availability_zone_names", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        """
        The IP CIDR block for the dedicated EKS VPC network.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name for the deployed EKS cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Tags to apply to all child resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "tags", value)


class Vpc(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zone_names: The list of target availability zone names.
        :param pulumi.Input[str] cidr_block: The IP CIDR block for the dedicated EKS VPC network.
        :param pulumi.Input[str] cluster_name: The name for the deployed EKS cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags to apply to all child resources.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            if availability_zone_names is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone_names'")
            __props__.__dict__["availability_zone_names"] = availability_zone_names
            if cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_block'")
            __props__.__dict__["cidr_block"] = cidr_block
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            if tags is None and not opts.urn:
                raise TypeError("Missing required property 'tags'")
            __props__.__dict__["tags"] = tags
            __props__.__dict__["control_plane_subnet_ids"] = None
            __props__.__dict__["private_subnet_ids"] = None
            __props__.__dict__["public_subnet_ids"] = None
            __props__.__dict__["vpc_resource"] = None
        super(Vpc, __self__).__init__(
            'xyz:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="controlPlaneSubnetIds")
    def control_plane_subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        List of IDs for the VPC's EKS Control Plane subnets.
        """
        return pulumi.get(self, "control_plane_subnet_ids")

    @property
    @pulumi.getter(name="privateSubnetIds")
    def private_subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        List of IDs for the VPC's private subnets.
        """
        return pulumi.get(self, "private_subnet_ids")

    @property
    @pulumi.getter(name="publicSubnetIds")
    def public_subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        List of IDs for the VPC's public subnets.
        """
        return pulumi.get(self, "public_subnet_ids")

    @property
    @pulumi.getter(name="vpcResource")
    def vpc_resource(self) -> pulumi.Output['pulumi_aws.ec2.Vpc']:
        """
        The VPC resource.
        """
        return pulumi.get(self, "vpc_resource")

